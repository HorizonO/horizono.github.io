<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Horizon&#39;blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2020-11-18T06:32:37.144Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Kyrie</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>FE-interview-JS</title>
    <link href="http://example.com/2020/11/16/FE-interview-JS/"/>
    <id>http://example.com/2020/11/16/FE-interview-JS/</id>
    <published>2020-11-16T13:26:02.000Z</published>
    <updated>2020-11-18T06:32:37.144Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JavaScript面试基础"><a href="#JavaScript面试基础" class="headerlink" title="JavaScript面试基础"></a>JavaScript面试基础</h2><hr><h3 id="1-介绍js的基本数据类型"><a href="#1-介绍js的基本数据类型" class="headerlink" title="1.介绍js的基本数据类型"></a>1.介绍js的基本数据类型</h3><p>js一共有六种基本数据类型，分别是Undefined，null，boolean，number，string，还有ES6新增的Symbol和ES10中新增的BigInt类型。</p><p>Symbol代表创建后独一无二且不可变的数据类型，它的出现可能是为了解决可能出现的全局变量冲突的问题（个人观点）</p><p>BigInt是一种数字类型的数据，它可以表示任意精度格式的整数，使用BigInt可以安全地存储和操作大整数，即使这个数已经超出了Number能够表示的安全整数范围。</p><h3 id="2-JavaScript有几种类型的值？"><a href="#2-JavaScript有几种类型的值？" class="headerlink" title="2.JavaScript有几种类型的值？"></a>2.JavaScript有几种类型的值？</h3><p>JavaScript可以分为两种类型的值，一种是基本数据类型，一种是复杂数据类型。</p><p>两种类型的主要区别是：存储位置不同</p><p><strong>原始数据类型</strong>直接存储在**<em>栈（stack）**</em>中的简单数据段，占据空间小，大小固定，属于被频繁使用数据，所以放入栈中存储。</p><p><strong>引用数据类型</strong>存储在**<em>堆（heap）**</em>中的对象，占据空间大，大小不固定。如果存储在栈中，将会影响程序运行的性能；引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体。</p><h3 id="3-什么是堆？什么是栈？它们之间有什么区别和联系？"><a href="#3-什么是堆？什么是栈？它们之间有什么区别和联系？" class="headerlink" title="3.什么是堆？什么是栈？它们之间有什么区别和联系？"></a>3.什么是堆？什么是栈？它们之间有什么区别和联系？</h3><p>堆和栈的概念存在于数据结构中和操作系统内存中。</p><p>在数据结构中，栈中数据的存取方式为先进后出。而堆是一个优先队列，是按优先级来进行排序的，优先级可以按照大小来规定。完全二叉树是堆的一种实现方式。</p><p>在操作系统中，内存被分为栈区和堆区。</p><p>栈区内存由编译器自动分配释放，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。</p><p>堆区内存一般由程序员分配释放，若程序员不释放，程序结束时可能由垃圾回收机制回收。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;JavaScript面试基础&quot;&gt;&lt;a href=&quot;#JavaScript面试基础&quot; class=&quot;headerlink&quot; title=&quot;JavaScript面试基础&quot;&gt;&lt;/a&gt;JavaScript面试基础&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;1-介绍js的基本数据类</summary>
      
    
    
    
    <category term="笔记" scheme="http://example.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="面试" scheme="http://example.com/categories/%E7%AC%94%E8%AE%B0/%E9%9D%A2%E8%AF%95/"/>
    
    
    <category term="面试" scheme="http://example.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>前端面试——CSS</title>
    <link href="http://example.com/2020/11/15/FE-interview-CSS/"/>
    <id>http://example.com/2020/11/15/FE-interview-CSS/</id>
    <published>2020-11-15T01:46:51.000Z</published>
    <updated>2020-11-18T06:14:20.265Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前端面试——CSS"><a href="#前端面试——CSS" class="headerlink" title="前端面试——CSS"></a>前端面试——CSS</h2><h3 id="1-介绍一下标准CSS的盒子模型和低版本的IE盒子模型有什么不同？"><a href="#1-介绍一下标准CSS的盒子模型和低版本的IE盒子模型有什么不同？" class="headerlink" title="1.介绍一下标准CSS的盒子模型和低版本的IE盒子模型有什么不同？"></a>1.介绍一下标准CSS的盒子模型和低版本的IE盒子模型有什么不同？</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;盒模型都是由四个部分组成的，分别是margin、border、padding和content。标准盒模型和IE盒模型的区别在于设置width和height时，所对应的范围不同。标准盒模型的width和height属性的范围只包含了content，而IE盒模型的width和height属性的范围包含了border、padding和content。<br>一般来说，可以通过修改元素的box-sizing属性来改变元素的盒模型。</p><hr><blockquote><p>（1）有两种盒子模型：IE盒模型（border-box）、W3C标准盒模型（content-box）<br>（2）盒模型：分为内容（content）、填充（padding）、边界（margin）、边框（border）四个部分。</p><p>IE盒模型和W3C标准盒模型的区别：</p><blockquote><p> （1）W3C标准盒模型：属性width，height只包含内容content，不包含border和padding；</p><p>（2）：IE盒模型：属性width，height包含<em>content</em>、<em>border</em>和<em>padding</em>，指的是 <strong>width=content+padding+border</strong>；</p></blockquote></blockquote><blockquote><p>&nbsp;&nbsp;在IE8+浏览器中使用哪个盒模型可以由<strong>box-sizing</strong>（CSS新增的属性）控制，默认值为<strong>content-box</strong>（W3C标准盒模型）;如果将<em>box-sizing</em>设为<em>border-box</em>则用的是<strong>IE盒模型</strong>。如果在ie6，7，8中DOCTYPE缺失会将盒子模型解释为IE盒子模型。若在页面中声明了DOCTYPE类型，所有浏览器都会把盒模型解释为W3C盒模型。</p></blockquote><h3 id="2-CSS选择符有哪些？"><a href="#2-CSS选择符有哪些？" class="headerlink" title="2.CSS选择符有哪些？"></a>2.CSS选择符有哪些？</h3><p>（1）id选择符（<code>#myid</code>）</p><p>（2）类选择符（.myclassname）</p><p>（3）标签选择符</p><p>（4）后代选择符</p><p>（5）相邻后代选择器（子）选择器（ul&gt;li）</p><p>（6）兄弟选择器（li～a）</p><p>（7）相邻兄弟选择器（li+a）</p><p>（8）属性选择器</p><p>（9）伪类选择器</p><p>（10）伪元素选择器</p><p>（11）通配符选择器</p><h3 id="3-before-和-after-中双冒号和单冒号有什么区别？解释一下这2个伪元素的作用"><a href="#3-before-和-after-中双冒号和单冒号有什么区别？解释一下这2个伪元素的作用" class="headerlink" title="3. ::before 和 :after 中双冒号和单冒号有什么区别？解释一下这2个伪元素的作用"></a>3. ::before 和 :after 中双冒号和单冒号有什么区别？解释一下这2个伪元素的作用</h3><p>在css3中使用<em>单冒号</em>来表示<strong>伪类</strong>，用<em>双冒号</em>来表示<strong>伪元素</strong>。但是为了兼容已有的伪元素的写法，在一些浏览器中也可以使用单冒号来表示伪元素。</p><p>伪类一般匹配的是元素的一些特殊状态，如hover、link等，而伪元素一般匹配的特殊的位置，比如after，before等。</p><blockquote><p>单冒号( ：)用于CSS3伪类，双冒号(::)用于CSS3伪元素（伪元素由双冒号和伪元素名称组成）。双冒号是在当前规范中引入的，用于区分伪类和伪元素。不过浏览器需要同时支持旧的已经存在的伪元素写法，而新的在CSS3中引入的伪元素则不允许再支持旧的单冒号的写法。</p><p>想让插入的内容出现在其他内容前，使用::before，否则，使用::after；</p><p>在代码顺序上,::after生成的内容也比::before生成的内容靠后</p><p>如果按堆栈视角，::after生成的内容会在::before生成的内容上。</p></blockquote><h3 id="4-伪类与伪元素的区别"><a href="#4-伪类与伪元素的区别" class="headerlink" title="4.伪类与伪元素的区别"></a>4.伪类与伪元素的区别</h3><p>css引入伪类和伪元素概念是为了格式化文档树以外的信息。也就是说，伪类和伪元素是用来修饰不在文档树中的部分，比如：一句话中的第一个字母，或者是列表中的第一个元素。</p><p><strong>伪类</strong>用于当已有的元素处于某个状态时，为其添加对应的样式，这个状态是根据用户行为而动态变化的。比如说：当用户<em>悬停</em>在指定的元素时，我们可以通过 <code>:hover</code>来描述这个元素的状态。</p><p><strong>伪元素</strong>用于创建一些不在文档树中的元素，并为其添加样式。它们允许我们为元素的某些部分设置样式。比如说，我们可以通过<code>::before</code>来在一个元素前增加一些文本，并为这些文本添加样式。虽然用户可以看到这些文本，但是这些文本实际上不在文档树中。</p><p>有时你会发现伪元素使用了两个冒号（<code>::</code>）而不是一个冒号（<code>:</code>）。这是CSS3的一部分，并尝试区分伪类和伪元素。大多数浏览器都支持这两个值。按照规则应该使用（<code>::</code>）而不是（<code>:</code>），从而区分伪类和伪元素。但是，由于在旧版本的W3C规范并未对此进行特别区分，因此目前绝大多数的浏览器都支持使用这两种方式表示伪元素。</p><p>*[参考资料]:<a href="http://www.alloyteam.com/2016/05/summary-of-pseudo-classes-and-pseudo-elements/">总结伪类与伪元素</a></p><h3 id="5-CSS中哪些属性可以继承？"><a href="#5-CSS中哪些属性可以继承？" class="headerlink" title="5.CSS中哪些属性可以继承？"></a>5.CSS中哪些属性可以继承？</h3><p>每个属性在定义中都给出了这个属性是否具有继承性，一个具有继承性的属性会在没有指定值的时候，会使用元素的同属性的值来作为自己的值。</p><p>一般具有继承性的属性有，字体相关的属性，font-size和font-weight等。文本相关的属性，color和text-align等。表格的一些<em>布局属性</em>，<em>列表属性</em>如list-style等。还有<em>光标属性</em>cursor，<em>元素可见性</em>visibility。</p><p>当一个属性不是继承属性的时候，我们也可以通过将它的值设置为inherit来使它从父元素那获取同名的属性值来继承。</p><p>*[参考资料]:<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/inheritance">继承属性</a>，<a href="https://www.jianshu.com/p/34044e3c9317">CSS有哪些属性可以继承</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前端面试——CSS&quot;&gt;&lt;a href=&quot;#前端面试——CSS&quot; class=&quot;headerlink&quot; title=&quot;前端面试——CSS&quot;&gt;&lt;/a&gt;前端面试——CSS&lt;/h2&gt;&lt;h3 id=&quot;1-介绍一下标准CSS的盒子模型和低版本的IE盒子模型有什么不同？&quot;&gt;&lt;a</summary>
      
    
    
    
    <category term="笔记" scheme="http://example.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="面试" scheme="http://example.com/categories/%E7%AC%94%E8%AE%B0/%E9%9D%A2%E8%AF%95/"/>
    
    
    <category term="面试" scheme="http://example.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="css" scheme="http://example.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>前端基础面试题——HTML</title>
    <link href="http://example.com/2020/11/12/FE-interview-HTML/"/>
    <id>http://example.com/2020/11/12/FE-interview-HTML/</id>
    <published>2020-11-12T08:25:38.000Z</published>
    <updated>2020-11-16T01:52:36.394Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTML基础面试"><a href="#HTML基础面试" class="headerlink" title="HTML基础面试"></a>HTML基础面试</h2><h3 id="1、-lt-img-gt-的-title-和-alt-有什么区别："><a href="#1、-lt-img-gt-的-title-和-alt-有什么区别：" class="headerlink" title="1、&lt;img&gt;的 title 和 alt 有什么区别："></a>1、<code>&lt;img&gt;</code>的 title 和 alt 有什么区别：</h3><ul><li>title是 global attributes 之一，用于为元素提供附加的advisory information。通常当鼠标滑动到元素上的时候显示。</li><li>alt是<code>&lt;img&gt;</code>的特有属性，是图片内容的等价描述，用于图片无法加载时显示，读屏器阅读图片。可提高图片可访问性，除了纯装饰图片外都必须设置有意义的值，搜索引擎会重点分析。</li></ul><h3 id="2、doctype-是什么-举例常见-doctype-及特点"><a href="#2、doctype-是什么-举例常见-doctype-及特点" class="headerlink" title="2、doctype 是什么,举例常见 doctype 及特点"></a>2、doctype 是什么,举例常见 doctype 及特点</h3><ul><li><!doctype> 声明必须处于HTML文档的头部，在<code>&lt;html&gt;&lt;/html&gt;</code>标签之前，HTML5中不区分大小写</li><li> <!doctype> 声明不是一个HTML标签，是一个用于告诉浏览器当前HTML版本的指令</li><li> 现代浏览器的html布局引擎通过检查 doctype 决定使用兼容模式还是标准模式对文档进行渲染，一些浏览器有一个接近标准模型。</li><li> 在HTML4.01中 &lt;!doctype&gt; 声明指向一个DTD，由于HTML4.01基于SGML，所以DTD指定了标记规则以保证浏览器正确渲染内容</li><li> HTML5不基于SGML，所以不用指定DTD</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;HTML基础面试&quot;&gt;&lt;a href=&quot;#HTML基础面试&quot; class=&quot;headerlink&quot; title=&quot;HTML基础面试&quot;&gt;&lt;/a&gt;HTML基础面试&lt;/h2&gt;&lt;h3 id=&quot;1、-lt-img-gt-的-title-和-alt-有什么区别：&quot;&gt;&lt;a hre</summary>
      
    
    
    
    <category term="笔记" scheme="http://example.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="面试" scheme="http://example.com/categories/%E7%AC%94%E8%AE%B0/%E9%9D%A2%E8%AF%95/"/>
    
    
    <category term="面试" scheme="http://example.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="HTML" scheme="http://example.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2020/10/30/hello-world/"/>
    <id>http://example.com/2020/10/30/hello-world/</id>
    <published>2020-10-30T06:54:25.207Z</published>
    <updated>2020-10-30T06:54:25.207Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
